---
import Tag from "@/components/ui/tag.astro";
import { getCollection } from "astro:content";
import {
  isPostPublished,
  getAllTags,
  getOriginalTagCase,
} from "@/lib/utils-blog";

interface Post {
  path: string;
  date: string;
  title: string;
  summary: string;
  tags?: string[];
  images?: string[];
}

interface PaginationProps {
  totalPages: number;
  currentPage: number;
}

interface Props {
  posts: Post[];
  title: string;
  initialDisplayPosts?: Post[];
  pagination?: PaginationProps;
}

const { posts, title, initialDisplayPosts = [], pagination } = Astro.props;

// Get ALL posts to extract ALL tags for the sidebar
const allBlogPosts = await getCollection("blog", isPostPublished);

// Get all unique tags using the improved case-insensitive function
const allTags = getAllTags(allBlogPosts);

// Count posts per tag from ALL posts using case-insensitive matching
const tagCounts: Record<string, number> = {};
allTags.forEach((normalizedTag) => {
  if (normalizedTag) {
    tagCounts[normalizedTag] = allBlogPosts.filter(
      (post) =>
        post.data.tags &&
        post.data.tags.some((tag) => tag.toLowerCase() === normalizedTag)
    ).length;
  }
});

// Sort tags by count (descending)
const sortedTags = Object.keys(tagCounts).sort(
  (a, b) => (tagCounts[b] ?? 0) - (tagCounts[a] ?? 0)
);

const displayPosts =
  initialDisplayPosts.length > 0 ? initialDisplayPosts : posts;

// Get current path for tag highlighting
const currentPath = Astro.url.pathname;
const currentTag = currentPath.startsWith("/tags/")
  ? currentPath.replace("/tags/", "")
  : null; // Extract current tag from URL

// Format date function
function formatDate(date: string, locale: string = "en-US") {
  return new Date(date).toLocaleDateString(locale, {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}

// Helper function to normalize tag for URL comparison
function normalizeTagForURL(tag: string): string {
  return tag.toLowerCase().replace(/\s+/g, "-");
}
---

<div>
  <div class="pb-6 pt-6">
    <h1
      class="text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-10 md:text-6xl md:leading-14"
    >
      {title}
    </h1>

    <div class="prose mt-4 max-w-none text-gray-700 dark:text-gray-400">
      <slot />
    </div>
  </div>

  <div class="flex flex-col gap-8 lg:flex-row lg:gap-12">
    <!-- Enhanced Sidebar -->
    <div class="w-full lg:w-80">
      <div class="sticky top-8">
        <div
          class="overflow-hidden rounded-2xl bg-white/80 shadow-xl ring-1 ring-gray-200/50 backdrop-blur-sm dark:bg-gray-800/80 dark:ring-gray-700/50"
        >
          <div
            class="border-b border-gray-200/50 bg-gradient-to-r from-gray-50 to-white px-6 py-4 dark:border-gray-700/50 dark:from-gray-800 dark:to-gray-700"
          >
            {
              currentPath.startsWith("/blog") ? (
                <h3 class="text-lg font-bold text-primary-600 dark:text-teal-400">
                  All Posts
                </h3>
              ) : (
                <a
                  href="/blog"
                  class="group flex items-center text-lg font-bold text-gray-700 transition-colors hover:text-primary-600 dark:text-gray-300 dark:hover:text-teal-400"
                >
                  All Posts
                  <svg
                    class="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                </a>
              )
            }
          </div>
          <div class="p-4">
            <div class="space-y-1">
              {
                sortedTags.length === 0 && (
                  <p class="text-sm text-gray-500 dark:text-gray-400">
                    No tags found
                  </p>
                )
              }
              {
                sortedTags.map((normalizedTag) => {
                  const count = tagCounts[normalizedTag] || 0;
                  const originalTag = getOriginalTagCase(
                    allBlogPosts,
                    normalizedTag
                  );
                  const isCurrentTag =
                    currentTag &&
                    normalizeTagForURL(originalTag) === currentTag;

                  return (
                    <div class="group">
                      {isCurrentTag ? (
                        <div class="rounded-xl bg-gradient-to-r from-primary-500 to-teal-500 px-4 py-3 shadow-lg">
                          <div class="flex items-center justify-between">
                            <span class="text-sm font-bold uppercase tracking-wide text-white">
                              {originalTag}
                            </span>
                            <span class="rounded-full bg-white/20 px-2 py-1 text-xs font-semibold text-white">
                              {count}
                            </span>
                          </div>
                        </div>
                      ) : (
                        <a
                          href={`/tags/${normalizeTagForURL(originalTag)}`}
                          class="group flex items-center justify-between rounded-xl px-4 py-3 transition-all duration-200 hover:bg-gray-100 hover:shadow-md dark:hover:bg-gray-700"
                          aria-label={`View posts tagged ${originalTag}`}
                        >
                          <span class="text-sm font-medium uppercase tracking-wide text-gray-600 transition-colors group-hover:text-primary-600 dark:text-gray-300 dark:group-hover:text-teal-400">
                            {originalTag}
                          </span>
                          <span class="rounded-full bg-gray-200 px-2 py-1 text-xs font-semibold text-gray-600 transition-colors group-hover:bg-primary-100 group-hover:text-primary-600 dark:bg-gray-700 dark:text-gray-300 dark:group-hover:bg-teal-900/20 dark:group-hover:text-teal-400">
                            {count}
                          </span>
                        </a>
                      )}
                    </div>
                  );
                })
              }
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main content area -->
    <div class="flex-1">
      <ul class="space-y-8">
        {displayPosts.length === 0 && "No posts found."}
        {
          displayPosts.map((post) => {
            const { path, date, title, summary, tags, images } = post;
            return (
              <li class="rounded-lg bg-white shadow-md transition-all hover:-translate-y-1 hover:shadow-lg dark:bg-gray-800">
                <article class="overflow-hidden rounded-lg">
                  {images && images[0] && (
                    <a href={`/${path}`} class="block overflow-hidden">
                      <img
                        src={images[0]}
                        alt={title}
                        width="800"
                        height="400"
                        class="h-48 w-full object-cover object-center transition duration-300 ease-in-out hover:scale-105"
                      />
                    </a>
                  )}
                  <div class="p-6">
                    <div class="flex items-center text-sm text-gray-500 dark:text-gray-400">
                      <svg
                        class="mr-2 h-4 w-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                        />
                      </svg>
                      <time datetime={date}>{formatDate(date)}</time>
                    </div>
                    <h2 class="mb-3 mt-2 text-2xl font-bold leading-8 tracking-tight">
                      <a
                        href={`/${path}`}
                        class="text-gray-900 hover:text-primary-500 dark:text-gray-100 dark:hover:text-teal-500"
                      >
                        {title}
                      </a>
                    </h2>
                    <div class="mb-4 flex flex-wrap">
                      {tags?.map((tag) => (
                        <Tag text={tag} />
                      ))}
                    </div>
                    <p class="prose mb-4 max-w-none text-gray-500 dark:text-gray-400">
                      {summary}
                    </p>
                    <a
                      href={`/${path}`}
                      class="rounded-full bg-gray-300 px-4 py-2 text-xs font-semibold transition-colors duration-300 hover:bg-gray-300/80 dark:bg-gray-700 dark:text-gray-100 dark:hover:bg-gray-700/80"
                      aria-label={`Read "${title}"`}
                    >
                      Read more
                    </a>
                  </div>
                </article>
              </li>
            );
          })
        }
      </ul>

      {
        pagination && pagination.totalPages > 1 && (
          <div class="space-y-2 pb-8 pt-6 md:space-y-5">
            <nav class="flex justify-between">
              {pagination.currentPage > 1 ? (
                <a
                  href={
                    pagination.currentPage - 1 === 1
                      ? `/blog/`
                      : `/blog/page/${pagination.currentPage - 1}`
                  }
                  rel="prev"
                  class="text-primary-500 hover:text-primary-700 dark:text-teal-400 dark:hover:text-teal-300"
                >
                  Previous
                </a>
              ) : (
                <button class="cursor-auto disabled:opacity-50" disabled>
                  Previous
                </button>
              )}
              <span class="text-gray-600 dark:text-gray-400">
                {pagination.currentPage} of {pagination.totalPages}
              </span>
              {pagination.currentPage < pagination.totalPages ? (
                <a
                  href={`/blog/page/${pagination.currentPage + 1}`}
                  rel="next"
                  class="text-primary-500 hover:text-primary-700 dark:text-teal-400 dark:hover:text-teal-300"
                >
                  Next
                </a>
              ) : (
                <button class="cursor-auto disabled:opacity-50" disabled>
                  Next
                </button>
              )}
            </nav>
          </div>
        )
      }
    </div>
  </div>
</div>

---
import RootLayout from "@/layouts/RootLayout.astro";
import PostLayout from "@/layouts/PostLayout.astro";
import { getCollection } from "astro:content";
import { getPostSlug, isPostPublished } from "@/lib/utils-blog";
import SEO from "@/components/seo/index.astro";
import Schema from "@/components/structured-data/index.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog", isPostPublished);

  return posts.map((post) => ({
    params: { slug: getPostSlug(post) },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

const allAuthors = await getCollection("authors");

let selectedAuthors = allAuthors.filter(
  (entry) => entry.data.name === post.data.author
);
if (selectedAuthors.length === 0 && allAuthors.length > 0) {
  selectedAuthors = allAuthors.slice(0, 1);
}

const authorDetails = selectedAuthors.map((entry) => {
  const data: any = entry.data;
  const avatarValue = data.avatar;
  const avatar =
    avatarValue && typeof avatarValue === "object" && "src" in avatarValue
      ? avatarValue.src
      : avatarValue;

  return {
    name: data.name,
    avatar: avatar,
    authorBioLink: data.authorBioLink ?? "whoami",
  };
});

// Transform post data to match the expected interface
const transformedPost = {
  filePath: post.id,
  path: `blog/${getPostSlug(post)}`,
  slug: getPostSlug(post),
  date: post.data.date,
  title: post.data.title,
  tags: post.data.tags || [],
};
---

<RootLayout>
  <SEO slot="seo" title={post.data.title} />
  <Schema slot="ld+json" type="Article" />
  <PostLayout content={transformedPost} authorDetails={authorDetails}>
    <Content />
  </PostLayout>
</RootLayout>

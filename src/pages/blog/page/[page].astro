---
import RootLayout from "@/layouts/RootLayout.astro";
import ListLayoutWithImages from "@/layouts/ListLayoutWithImages.astro";
import { getCollection } from "astro:content";
import {
  getPostSlug,
  isPostPublished,
  sortPostsByDate,
  resolvePostImages,
} from "@/lib/utils-blog";
import SEO from "@/components/seo/index.astro";
import Schema from "@/components/structured-data/index.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog", isPostPublished);
  const sortedPosts = sortPostsByDate(posts);
  const PAGE_SIZE = 6;
  const totalPages = Math.ceil(sortedPosts.length / PAGE_SIZE) || 1;
  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: String(i + 1) },
    props: { currentPage: i + 1, totalPages },
  }));
}

const { currentPage, totalPages } = Astro.props as {
  currentPage: number;
  totalPages: number;
};

const posts = await getCollection("blog", isPostPublished);
const sortedPosts = sortPostsByDate(posts);

const transformedPosts: {
  slug: string;
  date: string;
  title: string;
  summary: string;
  tags: string[];
  images: string[];
  draft?: boolean;
}[] = sortedPosts.map((post) => ({
  slug: getPostSlug(post),
  date: post.data.date,
  title: post.data.title,
  summary: post.data.summary,
  tags: post.data.tags || [],
  images: resolvePostImages(post),
  draft: post.data.draft || false,
}));

const PAGE_SIZE = 6;
const start = (currentPage - 1) * PAGE_SIZE;
const end = start + PAGE_SIZE;
const pagePosts = transformedPosts.slice(start, end);
---

<RootLayout>
  <SEO slot="seo" title="Blog" />
  <Schema slot="ld+json" type="WebSite" />
  <ListLayoutWithImages
    posts={pagePosts}
    pagination={{ totalPages: totalPages, currentPage: currentPage }}
  />
</RootLayout>
